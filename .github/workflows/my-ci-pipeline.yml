name: To-do app Integration
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'documentation/**'
    branches:
      - main
      - module_*
      
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'documentation/**'
    branches:
      - main
      - module_*


jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: build
        run: docker build --target test --tag to-do-test-image .

      - name: test
        run: docker run --env-file .env.test to-do-test-image

  build:
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/module_13'}}
    name: Create Docker image and push to docker hub
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    
    steps:  
      - uses: actions/checkout@v2        
     
      - run: echo "Publishing"
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Docker image
        run: docker build --target production --tag philw10/todo-app .
          
      - name: Push latest image to Docker hub
        run: docker push philw10/todo-app

      - name: Setting version tag
        run: docker tag philw10/todo-app philw10/todo-app:$IMAGE_TAG

      - name: Pushing tag to hub  
        run: docker push philw10/todo-app:$IMAGE_TAG
           
          
  deploy:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/module_13'}}
    name: Deploy infrastructure, and app
    env:
      ARM_CLIENT_ID                  : ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET              : ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID            : ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID                  : ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_flask_app               : ${{ secrets.TF_VAR_FLASK_APP }}
      TF_VAR_secret_key              : ${{ secrets.TF_VAR_SECRET_KEY }}
      TF_VAR_mongo_collection_name   : ${{ secrets.TF_VAR_MONGO_COLLECTION_NAME }}
      TF_VAR_admin_id                : ${{ secrets.TF_VAR_ADMIN_ID }}
      TF_VAR_oauth_client_id         : ${{ secrets.TF_VAR_OAUTH_CLIENT_ID }}
      TF_VAR_oauth_secret            : ${{ secrets.TF_VAR_OAUTH_SECRET }}
      TF_VAR_prefix                  : ${{ secrets.TF_VAR_PREFIX }}
      TF_VAR_loggly_token            : ${{ secrets.TF_VAR_LOGGLY_TOKEN }}
      TV_VAR_log_level               : ${{ secrets.TF_VAR_LOG_LEVEL }}
      
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Initialise Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Deploy/update infrastructure
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Trigger webhook
        working-directory: ./terraform
        run: curl --fail -dH -X POST "$(terraform output -raw cd_webhook_url)"